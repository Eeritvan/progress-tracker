package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"data-service/graph/model"
	"data-service/internal/auth"
	"data-service/internal/cards"
)

// CreateCard is the resolver for the createCard field.
func (r *mutationResolver) CreateCard(ctx context.Context, input model.NewCard) (*model.Card, error) {
	username, err := auth.ValidateToken(ctx)
	if err != nil {
		return nil, err
	}

	card, err := cards.DB_CreateCard(ctx, r.DB, username, input)
	if err != nil {
		return nil, err
	}

	return card, nil
}

// DeleteCard is the resolver for the deleteCard field.
func (r *mutationResolver) DeleteCard(ctx context.Context, input string) (bool, error) {
	username, err := auth.ValidateToken(ctx)
	if err != nil {
		return false, err
	}

	result, err := cards.DB_DeleteCard(ctx, r.DB, username, input)
	if err != nil {
		return false, nil
	}

	return result, nil
}

// CompleteDay is the resolver for the completeDay field.
func (r *mutationResolver) CompleteDay(ctx context.Context, input string) (bool, error) {
	username, err := auth.ValidateToken(ctx)
	if err != nil {
		return false, err
	}

	result, err := cards.DB_CompleteDay(ctx, r.DB, username, input)
	if err != nil {
		return false, nil
	}

	return result, nil
}

// ReorderCards is the resolver for the reorderCards field.
func (r *mutationResolver) ReorderCards(ctx context.Context, input []string) (bool, error) {
	username, err := auth.ValidateToken(ctx)
	if err != nil {
		return false, err
	}

	result, err := cards.DB_ReorderCards(ctx, r.DB, username, input)
	if err != nil {
		return false, err
	}

	return result, nil
}

// ResetAllCards is the resolver for the resetAllCards field.
func (r *mutationResolver) ResetAllCards(ctx context.Context) (bool, error) {
	username, err := auth.ValidateToken(ctx)
	if err != nil {
		return false, err
	}

	result, err := cards.DB_ResetAllCards(ctx, r.DB, username)
	if err != nil {
		return false, err
	}

	return result, nil
}

// GetCards is the resolver for the getCards field.
func (r *queryResolver) GetCards(ctx context.Context) ([]*model.Card, error) {
	username, err := auth.ValidateToken(ctx)
	if err != nil {
		return nil, err
	}

	cards, err := cards.DB_GetCards(ctx, r.DB, username)
	if err != nil {
		return nil, err
	}

	return cards, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
